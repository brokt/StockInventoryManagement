
//----------------------
// <auto-generated>
//     Generated REST API Client Code Generator v1.8.1.0 on 13.09.2023 09:31:33
//     Using the tool Refitter v0.7.2
// </auto-generated>
//----------------------


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

namespace Web
{
    public interface IStockInventoryMangement
    {
        [Post("/api/v{version}/Auth/login")]
        Task<IApiResponse<AccessTokenIDataResult>> Login(string version, [Body] LoginUserQuery body, CancellationToken cancellationToken = default);

        [Post("/api/v{version}/Auth/refresh-token")]
        Task<IApiResponse<AccessTokenIDataResult>> RefreshToken(string version, [Body] LoginWithRefreshTokenQuery body, CancellationToken cancellationToken = default);

        [Post("/api/v{version}/Auth/register")]
        Task<IApiResponse<IResult>> Register(string version, [Body] RegisterUserCommand body, CancellationToken cancellationToken = default);

        /// <summary>
        /// tckimlikno
        /// </summary>
        [Put("/api/v{version}/Auth/forgot-password")]
        Task<IApiResponse<IResult>> ForgotPassword(string version, [Body] ForgotPasswordCommand body, CancellationToken cancellationToken = default);

        [Put("/api/v{version}/Auth/user-password")]
        Task<IApiResponse<string>> UserPassword(string version, [Body] UserChangePasswordCommand body, CancellationToken cancellationToken = default);

        [Post("/api/v{version}/Auth/verify")]
        Task<IApiResponse<string>> Verify(string version, [Body] VerifyCidQuery body, CancellationToken cancellationToken = default);

        [Post("/api/v{version}/Auth/test")]
        Task<IApiResponse<string>> Test(string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// Categories
        /// </summary>
        [Get("/api/Categories/getCategoriesList")]
        Task<IApiResponse<ICollection<Category>>> GetCategoriesList(CancellationToken cancellationToken = default);

        /// <summary>
        /// Categories
        /// </summary>
        [Get("/api/Categories/getHierarchicalCategoriesList")]
        Task<IApiResponse<ICollection<HierarchicalDto>>> GetHierarchicalCategoriesList([Query] int? id, CancellationToken cancellationToken = default);

        /// <summary>
        /// Categories
        /// </summary>
        [Get("/api/Categories/getCategoryById")]
        Task<IApiResponse<Category>> GetCategoryById([Query] int? id, CancellationToken cancellationToken = default);

        [Post("/api/Categories/addCategory")]
        Task<IApiResponse<string>> AddCategory([Body] CreateCategoryCommand body, CancellationToken cancellationToken = default);

        [Put("/api/Categories/updateCategory")]
        Task<IApiResponse<string>> UpdateCategory([Body] UpdateCategoryCommand body, CancellationToken cancellationToken = default);

        [Delete("/api/Categories/deleteCategory")]
        Task<IApiResponse<string>> DeleteCategory([Body] DeleteCategoryCommand body, CancellationToken cancellationToken = default);

        /// <summary>
        /// CustomerAccounts
        /// </summary>
        [Get("/api/CustomerAccounts/getCustomerAccountsList")]
        Task<IApiResponse<ICollection<CustomerAccount>>> GetCustomerAccountsList(CancellationToken cancellationToken = default);

        /// <summary>
        /// CustomerAccounts
        /// </summary>
        [Get("/api/CustomerAccounts/getCustomerAccountById")]
        Task<IApiResponse<CustomerAccount>> GetCustomerAccountById([Query] int? id, CancellationToken cancellationToken = default);

        [Post("/api/CustomerAccounts/addCustomerAccount")]
        Task<IApiResponse<string>> AddCustomerAccount([Body] CreateCustomerAccountCommand body, CancellationToken cancellationToken = default);

        [Put("/api/CustomerAccounts/updateCustomerAccount")]
        Task<IApiResponse<string>> UpdateCustomerAccount([Body] UpdateCustomerAccountCommand body, CancellationToken cancellationToken = default);

        [Delete("/api/CustomerAccounts/deleteCustomerAccount")]
        Task<IApiResponse<string>> DeleteCustomerAccount([Body] DeleteCustomerAccountCommand body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Customers
        /// </summary>
        [Get("/api/Customers/getCustomersList")]
        Task<IApiResponse<ICollection<Customer>>> GetCustomersList(CancellationToken cancellationToken = default);

        /// <summary>
        /// Customers
        /// </summary>
        [Get("/api/Customers/getCustomerById")]
        Task<IApiResponse<Customer>> GetCustomerById([Query] int? id, CancellationToken cancellationToken = default);

        [Post("/api/Customers/addCustomer")]
        Task<IApiResponse<string>> AddCustomer([Body] CreateCustomerCommand body, CancellationToken cancellationToken = default);

        [Put("/api/Customers/updateCustomer")]
        Task<IApiResponse<string>> UpdateCustomer([Body] UpdateCustomerCommand body, CancellationToken cancellationToken = default);

        [Delete("/api/Customers/deleteCustomer")]
        Task<IApiResponse<string>> DeleteCustomer([Body] DeleteCustomerCommand body, CancellationToken cancellationToken = default);

        /// <summary>
        /// GroupClaims
        /// </summary>
        [Get("/api/v{version}/group-claims/getgroupClaimsList")]
        Task<IApiResponse<ICollection<GroupClaim>>> GetgroupClaimsList(string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla
        /// </summary>
        [Get("/api/v{version}/group-claims/GetGroupClaimById/{id}")]
        Task<IApiResponse<GroupClaim>> GetGroupClaimById(int id, string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla
        /// </summary>
        [Get("/api/v{version}/group-claims/groups/{id}")]
        Task<IApiResponse<ICollection<SelectionItem>>> Groups(int id, string version, CancellationToken cancellationToken = default);

        [Post("/api/v{version}/group-claims")]
        Task<IApiResponse<string>> GroupClaimsPOST(string version, [Body] CreateGroupClaimCommand body, CancellationToken cancellationToken = default);

        [Put("/api/v{version}/group-claims")]
        Task<IApiResponse<string>> GroupClaimsPUT(string version, [Body] UpdateGroupClaimDto body, CancellationToken cancellationToken = default);

        [Delete("/api/v{version}/group-claims/{id}")]
        Task<IApiResponse<string>> GroupClaimsDELETE(int id, string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla Groups
        /// </summary>
        [Get("/api/v{version}/Groups/getGroupsList")]
        Task GetGroupsList(string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla
        /// </summary>
        [Get("/api/v{version}/Groups/getGroup/{id}")]
        Task<IApiResponse<Group>> GetGroup(int id, string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// Group Lookup d√∂ner
        /// </summary>
        [Get("/api/v{version}/Groups/getSelectedGroupLookupList")]
        Task<IApiResponse<ICollection<SelectionItem>>> GetSelectedGroupLookupList(string version, CancellationToken cancellationToken = default);

        [Post("/api/v{version}/Groups")]
        Task<IApiResponse<string>> GroupsPOST(string version, [Body] CreateGroupCommand body, CancellationToken cancellationToken = default);

        [Put("/api/v{version}/Groups")]
        Task<IApiResponse<string>> GroupsPUT(string version, [Body] UpdateGroupDto body, CancellationToken cancellationToken = default);

        [Delete("/api/v{version}/Groups/{id}")]
        Task<IApiResponse<string>> GroupsDELETE(int id, string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla Languages
        /// </summary>
        [Get("/api/v{version}/Languages/codes")]
        Task<IApiResponse<ICollection<SelectionItem>>> Codes(string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla Languages
        /// </summary>
        [Get("/api/v{version}/Languages/lookups")]
        Task<IApiResponse<ICollection<SelectionItem>>> Lookups(string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla Languages
        /// </summary>
        [Get("/api/v{version}/Languages")]
        Task<IApiResponse<ICollection<Language>>> LanguagesAll(string version, CancellationToken cancellationToken = default);

        [Post("/api/v{version}/Languages")]
        Task<IApiResponse<string>> LanguagesPOST(string version, [Body] CreateLanguageCommand body, CancellationToken cancellationToken = default);

        [Put("/api/v{version}/Languages")]
        Task<IApiResponse<string>> LanguagesPUT(string version, [Body] UpdateLanguageDto body, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla
        /// </summary>
        [Get("/api/v{version}/Languages/GetLanguage/{id}")]
        Task<IApiResponse<Language>> GetLanguage(int id, string version, CancellationToken cancellationToken = default);

        [Delete("/api/v{version}/Languages/{id}")]
        Task<IApiResponse<string>> LanguagesDELETE(int id, string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla Logs
        /// </summary>
        [Get("/api/v{version}/Logs")]
        Task<IApiResponse<ICollection<OperationClaim>>> Logs(string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla OperationClaims
        /// </summary>
        [Get("/api/v{version}/operation-claims")]
        Task<IApiResponse<ICollection<OperationClaim>>> OperationClaimsAll(string version, CancellationToken cancellationToken = default);

        [Put("/api/v{version}/operation-claims")]
        Task<IApiResponse<string>> OperationClaims(string version, [Body] UpdateOperationClaimDto body, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla OperationClaims
        /// </summary>
        [Get("/api/v{version}/operation-claims/getOperationClaim/{id}")]
        Task<IApiResponse<OperationClaim>> GetOperationClaim(int id, string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla OperationClaims
        /// </summary>
        [Get("/api/v{version}/operation-claims/getOperationClaimLookups")]
        Task<IApiResponse<ICollection<SelectionItem>>> GetOperationClaimLookups(string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla OperationClaims
        /// </summary>
        [Get("/api/v{version}/operation-claims/cache")]
        Task<IApiResponse<ICollection<OperationClaim>>> Cache(string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// Orders
        /// </summary>
        [Get("/api/Orders/getOrdersList")]
        Task<IApiResponse<ICollection<Order>>> GetOrdersList(CancellationToken cancellationToken = default);

        /// <summary>
        /// Orders
        /// </summary>
        [Get("/api/Orders/getbyid")]
        Task<IApiResponse<Order>> Getbyid([Query] int? id, CancellationToken cancellationToken = default);

        [Post("/api/Orders")]
        Task<IApiResponse<string>> OrdersPOST([Body] CreateOrderCommand body, CancellationToken cancellationToken = default);

        [Put("/api/Orders")]
        Task<IApiResponse<string>> OrdersPUT([Body] UpdateOrderCommand body, CancellationToken cancellationToken = default);

        [Delete("/api/Orders")]
        Task<IApiResponse<string>> OrdersDELETE([Body] DeleteOrderCommand body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Products
        /// </summary>
        [Get("/api/Products/getProductsList")]
        Task<IApiResponse<ICollection<ProductDto>>> GetProductsList(CancellationToken cancellationToken = default);

        /// <summary>
        /// Products
        /// </summary>
        [Get("/api/Products/getProductById")]
        Task<IApiResponse<Product>> GetProductById([Query] int? id, CancellationToken cancellationToken = default);

        [Post("/api/Products")]
        Task<IApiResponse<string>> ProductsPOST([Body] CreateProductCommand body, CancellationToken cancellationToken = default);

        [Put("/api/Products")]
        Task<IApiResponse<string>> ProductsPUT([Body] UpdateProductCommand body, CancellationToken cancellationToken = default);

        [Delete("/api/Products")]
        Task<IApiResponse<string>> ProductsDELETE([Body] DeleteProductCommand body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Purchases
        /// </summary>
        [Get("/api/Purchases/getPurchasesList")]
        Task<IApiResponse<ICollection<Purchase>>> GetPurchasesList(CancellationToken cancellationToken = default);

        /// <summary>
        /// Purchases
        /// </summary>
        [Get("/api/Purchases/getPurchaseById")]
        Task<IApiResponse<Purchase>> GetPurchaseById([Query] int? id, CancellationToken cancellationToken = default);

        [Post("/api/Purchases")]
        Task<IApiResponse<string>> PurchasesPOST([Body] CreatePurchaseCommand body, CancellationToken cancellationToken = default);

        [Put("/api/Purchases")]
        Task<IApiResponse<string>> PurchasesPUT([Body] UpdatePurchaseCommand body, CancellationToken cancellationToken = default);

        [Delete("/api/Purchases")]
        Task<IApiResponse<string>> PurchasesDELETE([Body] DeletePurchaseCommand body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Sales
        /// </summary>
        [Get("/api/Sales/getSalesList")]
        Task<IApiResponse<ICollection<Sale>>> GetSalesList(CancellationToken cancellationToken = default);

        /// <summary>
        /// Sales
        /// </summary>
        [Get("/api/Sales/getSaleById")]
        Task<IApiResponse<Sale>> GetSaleById([Query] int? id, CancellationToken cancellationToken = default);

        [Post("/api/Sales")]
        Task<IApiResponse<string>> SalesPOST([Body] CreateSaleCommand body, CancellationToken cancellationToken = default);

        [Put("/api/Sales")]
        Task<IApiResponse<string>> SalesPUT([Body] UpdateSaleCommand body, CancellationToken cancellationToken = default);

        [Delete("/api/Sales")]
        Task<IApiResponse<string>> SalesDELETE([Body] DeleteSaleCommand body, CancellationToken cancellationToken = default);

        /// <summary>
        /// StockMovements
        /// </summary>
        [Get("/api/StockMovements/getStockMovementsList")]
        Task<IApiResponse<ICollection<StockMovement>>> GetStockMovementsList(CancellationToken cancellationToken = default);

        /// <summary>
        /// StockMovements
        /// </summary>
        [Get("/api/StockMovements/getStockMovementById")]
        Task<IApiResponse<StockMovement>> GetStockMovementById([Query] int? id, CancellationToken cancellationToken = default);

        [Post("/api/StockMovements")]
        Task<IApiResponse<string>> StockMovementsPOST([Body] CreateStockMovementCommand body, CancellationToken cancellationToken = default);

        [Put("/api/StockMovements")]
        Task<IApiResponse<string>> StockMovementsPUT([Body] UpdateStockMovementCommand body, CancellationToken cancellationToken = default);

        [Delete("/api/StockMovements")]
        Task<IApiResponse<string>> StockMovementsDELETE([Body] DeleteStockMovementCommand body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Suppliers
        /// </summary>
        [Get("/api/Suppliers/getSuppliersList")]
        Task<IApiResponse<ICollection<Supplier>>> GetSuppliersList(CancellationToken cancellationToken = default);

        /// <summary>
        /// Suppliers
        /// </summary>
        [Get("/api/Suppliers/getSupplierById")]
        Task<IApiResponse<Supplier>> GetSupplierById([Query] int? id, CancellationToken cancellationToken = default);

        [Post("/api/Suppliers")]
        Task<IApiResponse<string>> SuppliersPOST([Body] CreateSupplierCommand body, CancellationToken cancellationToken = default);

        [Put("/api/Suppliers")]
        Task<IApiResponse<string>> SuppliersPUT([Body] UpdateSupplierCommand body, CancellationToken cancellationToken = default);

        [Delete("/api/Suppliers")]
        Task<IApiResponse<string>> SuppliersDELETE([Body] DeleteSupplierCommand body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Transactions
        /// </summary>
        [Get("/api/Transactions/getTransactionsList")]
        Task<IApiResponse<ICollection<Transaction>>> GetTransactionsList(CancellationToken cancellationToken = default);

        /// <summary>
        /// Transactions
        /// </summary>
        [Get("/api/Transactions/getSupplierById")]
        Task<IApiResponse<Transaction>> GetSupplierById2([Query] int? id, CancellationToken cancellationToken = default);

        [Post("/api/Transactions")]
        Task<IApiResponse<string>> TransactionsPOST([Body] CreateTransactionCommand body, CancellationToken cancellationToken = default);

        [Put("/api/Transactions")]
        Task<IApiResponse<string>> TransactionsPUT([Body] UpdateTransactionCommand body, CancellationToken cancellationToken = default);

        [Delete("/api/Transactions")]
        Task<IApiResponse<string>> TransactionsDELETE([Body] DeleteTransactionCommand body, CancellationToken cancellationToken = default);

        [Get("/api/v{version}/Translates/languages/{lang}")]
        Task<IApiResponse<string>> Languages(string lang, string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla Translates
        /// </summary>
        [Get("/api/v{version}/Translates")]
        Task<IApiResponse<ICollection<Translate>>> TranslatesAll(string version, CancellationToken cancellationToken = default);

        [Post("/api/v{version}/Translates")]
        Task<IApiResponse<string>> TranslatesPOST(string version, [Body] CreateTranslateCommand body, CancellationToken cancellationToken = default);

        [Put("/api/v{version}/Translates")]
        Task<IApiResponse<string>> TranslatesPUT(string version, [Body] UpdateTranslateDto body, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla Translates
        /// </summary>
        [Get("/api/v{version}/Translates/dtos")]
        Task<IApiResponse<ICollection<Translate>>> Dtos(string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla
        /// </summary>
        [Get("/api/v{version}/Translates/getTranslate/{id}")]
        Task<IApiResponse<Translate>> GetTranslate(int id, string version, CancellationToken cancellationToken = default);

        [Delete("/api/v{version}/Translates/deleteTranslate/{id}")]
        Task<IApiResponse<string>> DeleteTranslate(int id, string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla UserClaims
        /// </summary>
        [Get("/api/v{version}/user-claims/getUserClaimsList")]
        Task<IApiResponse<ICollection<UserClaim>>> GetUserClaimsList(string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla
        /// </summary>
        [Get("/api/v{version}/user-claims/getUserClaimByUser/{id}")]
        Task<IApiResponse<ICollection<UserClaim>>> GetUserClaimByUser(int userid, string version, string id, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla
        /// </summary>
        [Get("/api/v{version}/user-claims/getOperationClaimByUser/{id}")]
        Task<IApiResponse<ICollection<SelectionItem>>> GetOperationClaimByUser(int id, string version, CancellationToken cancellationToken = default);

        [Post("/api/v{version}/user-claims")]
        Task<IApiResponse<string>> UserClaimsPOST(string version, [Body] CreateUserClaimCommand body, CancellationToken cancellationToken = default);

        [Put("/api/v{version}/user-claims")]
        Task<IApiResponse<string>> UserClaimsPUT(string version, [Body] UpdateUserClaimDto body, CancellationToken cancellationToken = default);

        [Delete("/api/v{version}/user-claims/{id}")]
        Task<IApiResponse<string>> UserClaimsDELETE(int id, string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla UserGroups
        /// </summary>
        [Get("/api/v{version}/user-groups/getUserGroupsList")]
        Task<IApiResponse<ICollection<UserGroup>>> GetUserGroupsList(string version, CancellationToken cancellationToken = default);

        [Get("/api/v{version}/user-groups/getUserGroupByUserId/{id}")]
        Task<IApiResponse<ICollection<SelectionItem>>> GetUserGroupByUserId(int userId, string version, string id, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla
        /// </summary>
        [Get("/api/v{version}/user-groups/getGroupClaims/{id}/groups")]
        Task<IApiResponse<ICollection<UserGroup>>> Groups2(int id, string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla
        /// </summary>
        [Get("/api/v{version}/user-groups/getUsersInGroupByGroupid/{id}/users")]
        Task<IApiResponse<ICollection<UserGroup>>> Users(int id, string version, CancellationToken cancellationToken = default);

        [Post("/api/v{version}/user-groups")]
        Task<IApiResponse<string>> UserGroupsPOST(string version, [Body] CreateUserGroupCommand body, CancellationToken cancellationToken = default);

        [Put("/api/v{version}/user-groups")]
        Task<IApiResponse<string>> UserGroupsPUT(string version, [Body] UpdateUserGroupCommand body, CancellationToken cancellationToken = default);

        [Put("/api/v{version}/user-groups/UpdateByGroupId")]
        Task<IApiResponse<string>> UpdateByGroupId(string version, [Body] UpdateUserGroupByGroupIdDto body, CancellationToken cancellationToken = default);

        [Delete("/api/v{version}/user-groups/DeleteUserGroup/{id}")]
        Task<IApiResponse<string>> DeleteUserGroup(int id, string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla Users
        /// </summary>
        [Get("/api/v{version}/Users/getUsersList")]
        Task<IApiResponse<ICollection<UserDto>>> GetUsersList(string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla Users
        /// </summary>
        [Get("/api/v{version}/Users/userLookups")]
        Task<IApiResponse<ICollection<SelectionItem>>> UserLookups(string version, CancellationToken cancellationToken = default);

        /// <summary>
        /// bla bla bla
        /// </summary>
        [Get("/api/v{version}/Users/{id}")]
        Task<IApiResponse<UserDto>> UsersGET(int id, string version, CancellationToken cancellationToken = default);

        [Delete("/api/v{version}/Users/{id}")]
        Task<IApiResponse<string>> UsersDELETE(int id, string version, CancellationToken cancellationToken = default);

        [Post("/api/v{version}/Users")]
        Task<IApiResponse<string>> UsersPOST(string version, [Body] CreateUserCommand body, CancellationToken cancellationToken = default);

        [Put("/api/v{version}/Users")]
        Task<IApiResponse<string>> UsersPUT(string version, [Body] UpdateUserDto body, CancellationToken cancellationToken = default);

        /// <summary>
        /// Warehouses
        /// </summary>
        [Get("/api/Warehouses/getWarehousesList")]
        Task<IApiResponse<ICollection<Warehouse>>> GetWarehousesList(CancellationToken cancellationToken = default);

        /// <summary>
        /// Warehouses
        /// </summary>
        [Get("/api/Warehouses/getWarehouseById")]
        Task<IApiResponse<Warehouse>> GetWarehouseById([Query] int? id, CancellationToken cancellationToken = default);

        [Post("/api/Warehouses")]
        Task<IApiResponse<string>> WarehousesPOST([Body] CreateWarehouseCommand body, CancellationToken cancellationToken = default);

        [Put("/api/Warehouses")]
        Task<IApiResponse<string>> WarehousesPUT([Body] UpdateWarehouseCommand body, CancellationToken cancellationToken = default);

        [Delete("/api/Warehouses")]
        Task<IApiResponse<string>> WarehousesDELETE([Body] DeleteWarehouseCommand body, CancellationToken cancellationToken = default);


    }
}


//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Web
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class AccessToken
    {

        [JsonPropertyName("claims")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> Claims { get; set; }

        [JsonPropertyName("groups")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<string> Groups { get; set; }

        [JsonPropertyName("token")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Token { get; set; }

        [JsonPropertyName("expiration")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime Expiration { get; set; }

        [JsonPropertyName("refreshToken")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string RefreshToken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class AccessTokenIDataResult
    {

        [JsonPropertyName("data")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public AccessToken Data { get; set; }

        [JsonPropertyName("success")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Success { get; set; }

        [JsonPropertyName("message")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Category
    {

        [JsonPropertyName("createdAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedAt { get; set; }

        [JsonPropertyName("createdById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CreatedById { get; set; }

        [JsonPropertyName("updatedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("updatedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? UpdatedById { get; set; }

        [JsonPropertyName("deletedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? DeletedAt { get; set; }

        [JsonPropertyName("deletedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeletedById { get; set; }

        [JsonPropertyName("isDeleted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; }

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("parentCategoryId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ParentCategoryId { get; set; }

        [JsonPropertyName("parentCategory")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Category ParentCategory { get; set; }

        [JsonPropertyName("productCategories")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ProductCategories> ProductCategories { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreateCategoryCommand
    {

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("parentCategoryId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ParentCategoryId { get; set; }

        [JsonPropertyName("productCategories")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ProductCategories> ProductCategories { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreateCustomerAccountCommand
    {

        [JsonPropertyName("customerId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CustomerId { get; set; }

        [JsonPropertyName("balance")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double Balance { get; set; }

        [JsonPropertyName("transactions")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<Transaction> Transactions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreateCustomerCommand
    {

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("email")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Email { get; set; }

        [JsonPropertyName("phoneNumber")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string PhoneNumber { get; set; }

        [JsonPropertyName("address")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Address { get; set; }

        [JsonPropertyName("loyaltyPoints")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double LoyaltyPoints { get; set; }

        [JsonPropertyName("orders")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<Order> Orders { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreateGroupClaimCommand
    {

        [JsonPropertyName("claimName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ClaimName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreateGroupCommand
    {

        [JsonPropertyName("groupName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string GroupName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreateLanguageCommand
    {

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("code")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Code { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreateOrderCommand
    {

        [JsonPropertyName("customerId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CustomerId { get; set; }

        [JsonPropertyName("orderDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime OrderDate { get; set; }

        [JsonPropertyName("orderItems")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<OrderItem> OrderItems { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreateProductCommand
    {

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("description")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [JsonPropertyName("sku")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Sku { get; set; }

        [JsonPropertyName("unitPrice")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double UnitPrice { get; set; }

        [JsonPropertyName("costPrice")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double CostPrice { get; set; }

        [JsonPropertyName("currentStockQuantity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CurrentStockQuantity { get; set; }

        [JsonPropertyName("minimumStockQuantity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int MinimumStockQuantity { get; set; }

        [JsonPropertyName("maximumStockQuantity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int MaximumStockQuantity { get; set; }

        [JsonPropertyName("weight")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double Weight { get; set; }

        [JsonPropertyName("brand")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Brand { get; set; }

        [JsonPropertyName("shelfNumber")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ShelfNumber { get; set; }

        [JsonPropertyName("batchNumber")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string BatchNumber { get; set; }

        [JsonPropertyName("stockMovements")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<StockMovement> StockMovements { get; set; }

        [JsonPropertyName("productCategories")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ProductCategories> ProductCategories { get; set; }

        [JsonPropertyName("productSuppliers")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ProductSupplier> ProductSuppliers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreatePurchaseCommand
    {

        [JsonPropertyName("supplierId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int SupplierId { get; set; }

        [JsonPropertyName("purchaseDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime PurchaseDate { get; set; }

        [JsonPropertyName("purchaseItems")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<PurchaseItem> PurchaseItems { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreateSaleCommand
    {

        [JsonPropertyName("customerId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CustomerId { get; set; }

        [JsonPropertyName("saleDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime SaleDate { get; set; }

        [JsonPropertyName("saleItems")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<SaleItem> SaleItems { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreateStockMovementCommand
    {

        [JsonPropertyName("movementDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime MovementDate { get; set; }

        [JsonPropertyName("quantity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Quantity { get; set; }

        [JsonPropertyName("productId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int ProductId { get; set; }

        [JsonPropertyName("warehouseId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int WarehouseId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreateSupplierCommand
    {

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("contactInfo")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ContactInfo { get; set; }

        [JsonPropertyName("address")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Address { get; set; }

        [JsonPropertyName("paymentTerms")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string PaymentTerms { get; set; }

        [JsonPropertyName("productSuppliers")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ProductSupplier> ProductSuppliers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreateTransactionCommand
    {

        [JsonPropertyName("transactionDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime TransactionDate { get; set; }

        [JsonPropertyName("amount")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double Amount { get; set; }

        [JsonPropertyName("customerAccountId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CustomerAccountId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreateTranslateCommand
    {

        [JsonPropertyName("langId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int LangId { get; set; }

        [JsonPropertyName("value")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Value { get; set; }

        [JsonPropertyName("code")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Code { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreateUserClaimCommand
    {

        [JsonPropertyName("userId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int UserId { get; set; }

        [JsonPropertyName("claimId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int ClaimId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreateUserCommand
    {

        [JsonPropertyName("userId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int UserId { get; set; }

        [JsonPropertyName("citizenId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long CitizenId { get; set; }

        [JsonPropertyName("fullName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FullName { get; set; }

        [JsonPropertyName("email")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Email { get; set; }

        [JsonPropertyName("mobilePhones")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string MobilePhones { get; set; }

        [JsonPropertyName("status")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Status { get; set; }

        [JsonPropertyName("birthDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime BirthDate { get; set; }

        [JsonPropertyName("gender")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Gender { get; set; }

        [JsonPropertyName("recordDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime RecordDate { get; set; }

        [JsonPropertyName("address")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Address { get; set; }

        [JsonPropertyName("notes")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Notes { get; set; }

        [JsonPropertyName("updateContactDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime UpdateContactDate { get; set; }

        [JsonPropertyName("password")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Password { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreateUserGroupCommand
    {

        [JsonPropertyName("groupId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int GroupId { get; set; }

        [JsonPropertyName("userId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int UserId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CreateWarehouseCommand
    {

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("location")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Location { get; set; }

        [JsonPropertyName("stockMovements")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<StockMovement> StockMovements { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Customer
    {

        [JsonPropertyName("createdAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedAt { get; set; }

        [JsonPropertyName("createdById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CreatedById { get; set; }

        [JsonPropertyName("updatedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("updatedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? UpdatedById { get; set; }

        [JsonPropertyName("deletedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? DeletedAt { get; set; }

        [JsonPropertyName("deletedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeletedById { get; set; }

        [JsonPropertyName("isDeleted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; }

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("email")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Email { get; set; }

        [JsonPropertyName("phoneNumber")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string PhoneNumber { get; set; }

        [JsonPropertyName("address")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Address { get; set; }

        [JsonPropertyName("type")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public CustomerType Type { get; set; }

        [JsonPropertyName("genderType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public GenderType GenderType { get; set; }

        [JsonPropertyName("loyaltyPoints")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double LoyaltyPoints { get; set; }

        [JsonPropertyName("orders")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<Order> Orders { get; set; }

        [JsonPropertyName("customerAccount")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public CustomerAccount CustomerAccount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CustomerAccount
    {

        [JsonPropertyName("createdAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedAt { get; set; }

        [JsonPropertyName("createdById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CreatedById { get; set; }

        [JsonPropertyName("updatedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("updatedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? UpdatedById { get; set; }

        [JsonPropertyName("deletedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? DeletedAt { get; set; }

        [JsonPropertyName("deletedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeletedById { get; set; }

        [JsonPropertyName("isDeleted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; }

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("customerId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CustomerId { get; set; }

        [JsonPropertyName("customer")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Customer Customer { get; set; }

        [JsonPropertyName("balance")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double Balance { get; set; }

        [JsonPropertyName("transactions")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<Transaction> Transactions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum CustomerType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Individual")]
        Individual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Wholesale")]
        Wholesale = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Corporate")]
        Corporate = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DeleteCategoryCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DeleteCustomerAccountCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DeleteCustomerCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DeleteOrderCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DeleteProductCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DeletePurchaseCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DeleteSaleCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DeleteStockMovementCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DeleteSupplierCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DeleteTransactionCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DeleteWarehouseCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ForgotPasswordCommand
    {

        [JsonPropertyName("tcKimlikNo")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string TcKimlikNo { get; set; }

        [JsonPropertyName("email")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Email { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum GenderType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Female")]
        Female = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Male")]
        Male = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Group
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("groupName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string GroupName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class GroupClaim
    {

        [JsonPropertyName("groupId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int GroupId { get; set; }

        [JsonPropertyName("claimId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int ClaimId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class HierarchicalDto
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("hasChildren")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool HasChildren { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class IResult
    {

        [JsonPropertyName("success")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Success { get; set; }

        [JsonPropertyName("message")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Language
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("code")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Code { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class LoginUserQuery
    {

        [JsonPropertyName("email")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Email { get; set; }

        [JsonPropertyName("password")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Password { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class LoginWithRefreshTokenQuery
    {

        [JsonPropertyName("refreshToken")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string RefreshToken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class OperationClaim
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("alias")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Alias { get; set; }

        [JsonPropertyName("description")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Order
    {

        [JsonPropertyName("createdAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedAt { get; set; }

        [JsonPropertyName("createdById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CreatedById { get; set; }

        [JsonPropertyName("updatedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("updatedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? UpdatedById { get; set; }

        [JsonPropertyName("deletedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? DeletedAt { get; set; }

        [JsonPropertyName("deletedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeletedById { get; set; }

        [JsonPropertyName("isDeleted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; }

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("customerId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CustomerId { get; set; }

        [JsonPropertyName("orderDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime OrderDate { get; set; }

        [JsonPropertyName("orderItems")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<OrderItem> OrderItems { get; set; }

        [JsonPropertyName("customer")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Customer Customer { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class OrderItem
    {

        [JsonPropertyName("createdAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedAt { get; set; }

        [JsonPropertyName("createdById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CreatedById { get; set; }

        [JsonPropertyName("updatedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("updatedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? UpdatedById { get; set; }

        [JsonPropertyName("deletedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? DeletedAt { get; set; }

        [JsonPropertyName("deletedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeletedById { get; set; }

        [JsonPropertyName("isDeleted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; }

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("orderId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int OrderId { get; set; }

        [JsonPropertyName("productId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int ProductId { get; set; }

        [JsonPropertyName("quantity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Quantity { get; set; }

        [JsonPropertyName("unitPrice")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double UnitPrice { get; set; }

        [JsonPropertyName("product")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Product Product { get; set; }

        [JsonPropertyName("order")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Order Order { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Product
    {

        [JsonPropertyName("createdAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedAt { get; set; }

        [JsonPropertyName("createdById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CreatedById { get; set; }

        [JsonPropertyName("updatedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("updatedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? UpdatedById { get; set; }

        [JsonPropertyName("deletedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? DeletedAt { get; set; }

        [JsonPropertyName("deletedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeletedById { get; set; }

        [JsonPropertyName("isDeleted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; }

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("description")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [JsonPropertyName("sku")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Sku { get; set; }

        [JsonPropertyName("unitPrice")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double UnitPrice { get; set; }

        [JsonPropertyName("costPrice")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double CostPrice { get; set; }

        [JsonPropertyName("currentStockQuantity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CurrentStockQuantity { get; set; }

        [JsonPropertyName("minimumStockQuantity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int MinimumStockQuantity { get; set; }

        [JsonPropertyName("maximumStockQuantity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int MaximumStockQuantity { get; set; }

        [JsonPropertyName("weight")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double Weight { get; set; }

        [JsonPropertyName("brand")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Brand { get; set; }

        [JsonPropertyName("shelfNumber")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ShelfNumber { get; set; }

        [JsonPropertyName("batchNumber")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string BatchNumber { get; set; }

        [JsonPropertyName("stockMovements")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<StockMovement> StockMovements { get; set; }

        [JsonPropertyName("productCategories")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ProductCategories> ProductCategories { get; set; }

        [JsonPropertyName("productSuppliers")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ProductSupplier> ProductSuppliers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ProductCategories
    {

        [JsonPropertyName("categoryId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CategoryId { get; set; }

        [JsonPropertyName("category")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Category Category { get; set; }

        [JsonPropertyName("productId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int ProductId { get; set; }

        [JsonPropertyName("product")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Product Product { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ProductDto
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("costPrice")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double CostPrice { get; set; }

        [JsonPropertyName("unitPrice")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double UnitPrice { get; set; }

        [JsonPropertyName("categoriesName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string CategoriesName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ProductSupplier
    {

        [JsonPropertyName("createdAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedAt { get; set; }

        [JsonPropertyName("createdById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CreatedById { get; set; }

        [JsonPropertyName("updatedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("updatedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? UpdatedById { get; set; }

        [JsonPropertyName("deletedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? DeletedAt { get; set; }

        [JsonPropertyName("deletedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeletedById { get; set; }

        [JsonPropertyName("isDeleted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; }

        [JsonPropertyName("productId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int ProductId { get; set; }

        [JsonPropertyName("product")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Product Product { get; set; }

        [JsonPropertyName("supplierId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int SupplierId { get; set; }

        [JsonPropertyName("supplier")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Supplier Supplier { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Purchase
    {

        [JsonPropertyName("createdAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedAt { get; set; }

        [JsonPropertyName("createdById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CreatedById { get; set; }

        [JsonPropertyName("updatedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("updatedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? UpdatedById { get; set; }

        [JsonPropertyName("deletedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? DeletedAt { get; set; }

        [JsonPropertyName("deletedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeletedById { get; set; }

        [JsonPropertyName("isDeleted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; }

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("supplierId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int SupplierId { get; set; }

        [JsonPropertyName("purchaseDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime PurchaseDate { get; set; }

        [JsonPropertyName("supplier")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Supplier Supplier { get; set; }

        [JsonPropertyName("purchaseItems")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<PurchaseItem> PurchaseItems { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class PurchaseItem
    {

        [JsonPropertyName("createdAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedAt { get; set; }

        [JsonPropertyName("createdById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CreatedById { get; set; }

        [JsonPropertyName("updatedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("updatedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? UpdatedById { get; set; }

        [JsonPropertyName("deletedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? DeletedAt { get; set; }

        [JsonPropertyName("deletedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeletedById { get; set; }

        [JsonPropertyName("isDeleted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; }

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("purchaseId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int PurchaseId { get; set; }

        [JsonPropertyName("productId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int ProductId { get; set; }

        [JsonPropertyName("quantity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Quantity { get; set; }

        [JsonPropertyName("unitPrice")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double UnitPrice { get; set; }

        [JsonPropertyName("product")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Product Product { get; set; }

        [JsonPropertyName("purchase")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Purchase Purchase { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class RegisterUserCommand
    {

        [JsonPropertyName("email")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Email { get; set; }

        [JsonPropertyName("password")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Password { get; set; }

        [JsonPropertyName("fullName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FullName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Sale
    {

        [JsonPropertyName("createdAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedAt { get; set; }

        [JsonPropertyName("createdById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CreatedById { get; set; }

        [JsonPropertyName("updatedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("updatedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? UpdatedById { get; set; }

        [JsonPropertyName("deletedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? DeletedAt { get; set; }

        [JsonPropertyName("deletedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeletedById { get; set; }

        [JsonPropertyName("isDeleted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; }

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("customerId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CustomerId { get; set; }

        [JsonPropertyName("saleDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime SaleDate { get; set; }

        [JsonPropertyName("customer")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Customer Customer { get; set; }

        [JsonPropertyName("saleItems")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<SaleItem> SaleItems { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SaleItem
    {

        [JsonPropertyName("createdAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedAt { get; set; }

        [JsonPropertyName("createdById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CreatedById { get; set; }

        [JsonPropertyName("updatedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("updatedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? UpdatedById { get; set; }

        [JsonPropertyName("deletedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? DeletedAt { get; set; }

        [JsonPropertyName("deletedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeletedById { get; set; }

        [JsonPropertyName("isDeleted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; }

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("saleId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int SaleId { get; set; }

        [JsonPropertyName("productId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int ProductId { get; set; }

        [JsonPropertyName("quantity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Quantity { get; set; }

        [JsonPropertyName("unitPrice")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double UnitPrice { get; set; }

        [JsonPropertyName("product")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Product Product { get; set; }

        [JsonPropertyName("sale")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Sale Sale { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SelectionItem
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public object Id { get; set; }

        [JsonPropertyName("parentId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ParentId { get; set; }

        [JsonPropertyName("label")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Label { get; set; }

        [JsonPropertyName("isDisabled")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDisabled { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class StockMovement
    {

        [JsonPropertyName("createdAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedAt { get; set; }

        [JsonPropertyName("createdById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CreatedById { get; set; }

        [JsonPropertyName("updatedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("updatedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? UpdatedById { get; set; }

        [JsonPropertyName("deletedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? DeletedAt { get; set; }

        [JsonPropertyName("deletedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeletedById { get; set; }

        [JsonPropertyName("isDeleted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; }

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("movementDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime MovementDate { get; set; }

        [JsonPropertyName("quantity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Quantity { get; set; }

        [JsonPropertyName("movementType")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public StockMovementType MovementType { get; set; }

        [JsonPropertyName("productId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int ProductId { get; set; }

        [JsonPropertyName("product")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Product Product { get; set; }

        [JsonPropertyName("warehouseId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int WarehouseId { get; set; }

        [JsonPropertyName("warehouse")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public Warehouse Warehouse { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum StockMovementType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"StockIn")]
        StockIn = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"StockOut")]
        StockOut = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Supplier
    {

        [JsonPropertyName("createdAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedAt { get; set; }

        [JsonPropertyName("createdById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CreatedById { get; set; }

        [JsonPropertyName("updatedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("updatedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? UpdatedById { get; set; }

        [JsonPropertyName("deletedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? DeletedAt { get; set; }

        [JsonPropertyName("deletedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeletedById { get; set; }

        [JsonPropertyName("isDeleted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; }

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("contactInfo")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ContactInfo { get; set; }

        [JsonPropertyName("address")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Address { get; set; }

        [JsonPropertyName("paymentTerms")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string PaymentTerms { get; set; }

        [JsonPropertyName("productSuppliers")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ProductSupplier> ProductSuppliers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Transaction
    {

        [JsonPropertyName("createdAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedAt { get; set; }

        [JsonPropertyName("createdById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CreatedById { get; set; }

        [JsonPropertyName("updatedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("updatedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? UpdatedById { get; set; }

        [JsonPropertyName("deletedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? DeletedAt { get; set; }

        [JsonPropertyName("deletedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeletedById { get; set; }

        [JsonPropertyName("isDeleted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; }

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("transactionDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime TransactionDate { get; set; }

        [JsonPropertyName("amount")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double Amount { get; set; }

        [JsonPropertyName("type")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public TransactionType Type { get; set; }

        [JsonPropertyName("customerAccountId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CustomerAccountId { get; set; }

        [JsonPropertyName("customerAccount")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public CustomerAccount CustomerAccount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public enum TransactionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Payment")]
        Payment = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Purchase")]
        Purchase = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Sale")]
        Sale = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Translate
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("langId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int LangId { get; set; }

        [JsonPropertyName("code")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Code { get; set; }

        [JsonPropertyName("value")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateCategoryCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("parentCategoryId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ParentCategoryId { get; set; }

        [JsonPropertyName("productCategories")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ProductCategories> ProductCategories { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateCustomerAccountCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("customerId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CustomerId { get; set; }

        [JsonPropertyName("balance")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double Balance { get; set; }

        [JsonPropertyName("transactions")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<Transaction> Transactions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateCustomerCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("email")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Email { get; set; }

        [JsonPropertyName("phoneNumber")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string PhoneNumber { get; set; }

        [JsonPropertyName("address")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Address { get; set; }

        [JsonPropertyName("loyaltyPoints")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double LoyaltyPoints { get; set; }

        [JsonPropertyName("orders")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<Order> Orders { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateGroupClaimDto
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("groupId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int GroupId { get; set; }

        [JsonPropertyName("claimIds")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<int> ClaimIds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateGroupDto
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("groupName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string GroupName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateLanguageDto
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("code")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Code { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateOperationClaimDto
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("alias")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Alias { get; set; }

        [JsonPropertyName("description")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateOrderCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("customerId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CustomerId { get; set; }

        [JsonPropertyName("orderDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime OrderDate { get; set; }

        [JsonPropertyName("orderItems")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<OrderItem> OrderItems { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateProductCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("description")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        [JsonPropertyName("sku")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Sku { get; set; }

        [JsonPropertyName("unitPrice")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double UnitPrice { get; set; }

        [JsonPropertyName("costPrice")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double CostPrice { get; set; }

        [JsonPropertyName("currentStockQuantity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CurrentStockQuantity { get; set; }

        [JsonPropertyName("minimumStockQuantity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int MinimumStockQuantity { get; set; }

        [JsonPropertyName("maximumStockQuantity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int MaximumStockQuantity { get; set; }

        [JsonPropertyName("weight")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double Weight { get; set; }

        [JsonPropertyName("brand")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Brand { get; set; }

        [JsonPropertyName("shelfNumber")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ShelfNumber { get; set; }

        [JsonPropertyName("batchNumber")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string BatchNumber { get; set; }

        [JsonPropertyName("stockMovements")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<StockMovement> StockMovements { get; set; }

        [JsonPropertyName("productCategories")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ProductCategories> ProductCategories { get; set; }

        [JsonPropertyName("productSuppliers")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ProductSupplier> ProductSuppliers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdatePurchaseCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("supplierId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int SupplierId { get; set; }

        [JsonPropertyName("purchaseDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime PurchaseDate { get; set; }

        [JsonPropertyName("purchaseItems")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<PurchaseItem> PurchaseItems { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateSaleCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("customerId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CustomerId { get; set; }

        [JsonPropertyName("saleDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime SaleDate { get; set; }

        [JsonPropertyName("saleItems")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<SaleItem> SaleItems { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateStockMovementCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("movementDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime MovementDate { get; set; }

        [JsonPropertyName("quantity")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Quantity { get; set; }

        [JsonPropertyName("productId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int ProductId { get; set; }

        [JsonPropertyName("warehouseId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int WarehouseId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateSupplierCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("contactInfo")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string ContactInfo { get; set; }

        [JsonPropertyName("address")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Address { get; set; }

        [JsonPropertyName("paymentTerms")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string PaymentTerms { get; set; }

        [JsonPropertyName("productSuppliers")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<ProductSupplier> ProductSuppliers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateTransactionCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("transactionDate")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime TransactionDate { get; set; }

        [JsonPropertyName("amount")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public double Amount { get; set; }

        [JsonPropertyName("customerAccountId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int CustomerAccountId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateTranslateDto
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("langId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int LangId { get; set; }

        [JsonPropertyName("value")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Value { get; set; }

        [JsonPropertyName("code")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Code { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateUserClaimDto
    {

        [JsonPropertyName("userId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int UserId { get; set; }

        [JsonPropertyName("claimIds")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<int> ClaimIds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateUserDto
    {

        [JsonPropertyName("userId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int UserId { get; set; }

        [JsonPropertyName("email")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Email { get; set; }

        [JsonPropertyName("fullName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FullName { get; set; }

        [JsonPropertyName("mobilePhones")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string MobilePhones { get; set; }

        [JsonPropertyName("address")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Address { get; set; }

        [JsonPropertyName("notes")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Notes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateUserGroupByGroupIdDto
    {

        [JsonPropertyName("groupId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int GroupId { get; set; }

        [JsonPropertyName("userIds")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<int> UserIds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateUserGroupCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("userId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int UserId { get; set; }

        [JsonPropertyName("groupId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<int> GroupId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UpdateWarehouseCommand
    {

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("location")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Location { get; set; }

        [JsonPropertyName("stockMovements")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<StockMovement> StockMovements { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UserChangePasswordCommand
    {

        [JsonPropertyName("userId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int UserId { get; set; }

        [JsonPropertyName("password")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Password { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UserClaim
    {

        [JsonPropertyName("userId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int UserId { get; set; }

        [JsonPropertyName("claimId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int ClaimId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UserDto
    {

        [JsonPropertyName("userId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int UserId { get; set; }

        [JsonPropertyName("fullName")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string FullName { get; set; }

        [JsonPropertyName("email")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Email { get; set; }

        [JsonPropertyName("mobilePhones")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string MobilePhones { get; set; }

        [JsonPropertyName("address")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Address { get; set; }

        [JsonPropertyName("notes")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Notes { get; set; }

        [JsonPropertyName("gender")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Gender { get; set; }

        [JsonPropertyName("password")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Password { get; set; }

        [JsonPropertyName("status")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Status { get; set; }

        [JsonPropertyName("refreshToken")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string RefreshToken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class UserGroup
    {

        [JsonPropertyName("groupId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int GroupId { get; set; }

        [JsonPropertyName("userId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int UserId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class VerifyCidQuery
    {

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("surname")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Surname { get; set; }

        [JsonPropertyName("citizenId")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long CitizenId { get; set; }

        [JsonPropertyName("birthYear")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int BirthYear { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Warehouse
    {

        [JsonPropertyName("createdAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedAt { get; set; }

        [JsonPropertyName("createdById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CreatedById { get; set; }

        [JsonPropertyName("updatedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("updatedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int? UpdatedById { get; set; }

        [JsonPropertyName("deletedAt")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? DeletedAt { get; set; }

        [JsonPropertyName("deletedById")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeletedById { get; set; }

        [JsonPropertyName("isDeleted")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; }

        [JsonPropertyName("id")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; }

        [JsonPropertyName("name")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Name { get; set; }

        [JsonPropertyName("location")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public string Location { get; set; }

        [JsonPropertyName("stockMovements")]

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]   
        public ICollection<StockMovement> StockMovements { get; set; }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
