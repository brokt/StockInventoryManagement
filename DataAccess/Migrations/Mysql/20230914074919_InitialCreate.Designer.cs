// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations.Mysql
{
    [DbContext(typeof(MySqlDbContext))]
    [Migration("20230914074919_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Concrete.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Core.Entities.Concrete.GroupClaim", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.HasKey("GroupId", "ClaimId");

                    b.ToTable("GroupClaims");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "tr-TR",
                            Name = "Türkçe"
                        },
                        new
                        {
                            Id = 2,
                            Code = "en-US",
                            Name = "English"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Exception")
                        .HasColumnType("longtext");

                    b.Property<string>("Level")
                        .HasColumnType("longtext");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Core.Entities.Concrete.MobileLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("ExternalUserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsSend")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Provider")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalUserId", "Provider");

                    b.ToTable("MobileLogins");
                });

            modelBuilder.Entity("Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Alias")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Translate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Translates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Login",
                            LangId = 1,
                            Value = "Giriş"
                        },
                        new
                        {
                            Id = 2,
                            Code = "Email",
                            LangId = 1,
                            Value = "E posta"
                        },
                        new
                        {
                            Id = 3,
                            Code = "Password",
                            LangId = 1,
                            Value = "Parola"
                        },
                        new
                        {
                            Id = 4,
                            Code = "Update",
                            LangId = 1,
                            Value = "Güncelle"
                        },
                        new
                        {
                            Id = 5,
                            Code = "Delete",
                            LangId = 1,
                            Value = "Sil"
                        },
                        new
                        {
                            Id = 6,
                            Code = "UsersGroups",
                            LangId = 1,
                            Value = "Kullanıcının Grupları"
                        },
                        new
                        {
                            Id = 7,
                            Code = "UsersClaims",
                            LangId = 1,
                            Value = "Kullanıcının Yetkileri"
                        },
                        new
                        {
                            Id = 8,
                            Code = "Create",
                            LangId = 1,
                            Value = "Yeni"
                        },
                        new
                        {
                            Id = 9,
                            Code = "Users",
                            LangId = 1,
                            Value = "Kullanıcılar"
                        },
                        new
                        {
                            Id = 10,
                            Code = "Groups",
                            LangId = 1,
                            Value = "Gruplar"
                        },
                        new
                        {
                            Id = 11,
                            Code = "Login",
                            LangId = 2,
                            Value = "Login"
                        },
                        new
                        {
                            Id = 12,
                            Code = "Email",
                            LangId = 2,
                            Value = "Email"
                        },
                        new
                        {
                            Id = 13,
                            Code = "Password",
                            LangId = 2,
                            Value = "Password"
                        },
                        new
                        {
                            Id = 14,
                            Code = "Update",
                            LangId = 2,
                            Value = "Update"
                        },
                        new
                        {
                            Id = 15,
                            Code = "Delete",
                            LangId = 2,
                            Value = "Delete"
                        },
                        new
                        {
                            Id = 16,
                            Code = "UsersGroups",
                            LangId = 2,
                            Value = "User's Groups"
                        },
                        new
                        {
                            Id = 17,
                            Code = "UsersClaims",
                            LangId = 2,
                            Value = "User's Claims"
                        },
                        new
                        {
                            Id = 18,
                            Code = "Create",
                            LangId = 2,
                            Value = "Create"
                        },
                        new
                        {
                            Id = 19,
                            Code = "Users",
                            LangId = 2,
                            Value = "Users"
                        },
                        new
                        {
                            Id = 20,
                            Code = "Groups",
                            LangId = 2,
                            Value = "Groups"
                        },
                        new
                        {
                            Id = 21,
                            Code = "OperationClaim",
                            LangId = 1,
                            Value = "Operasyon Yetkileri"
                        },
                        new
                        {
                            Id = 22,
                            Code = "OperationClaim",
                            LangId = 2,
                            Value = "Operation Claim"
                        },
                        new
                        {
                            Id = 23,
                            Code = "Languages",
                            LangId = 1,
                            Value = "Diller"
                        },
                        new
                        {
                            Id = 24,
                            Code = "Languages",
                            LangId = 2,
                            Value = "Languages"
                        },
                        new
                        {
                            Id = 25,
                            Code = "TranslateWords",
                            LangId = 1,
                            Value = "Dil Çevirileri"
                        },
                        new
                        {
                            Id = 26,
                            Code = "TranslateWords",
                            LangId = 2,
                            Value = "Translate Words"
                        },
                        new
                        {
                            Id = 27,
                            Code = "Management",
                            LangId = 1,
                            Value = "Yönetim"
                        },
                        new
                        {
                            Id = 28,
                            Code = "Management",
                            LangId = 2,
                            Value = "Management"
                        },
                        new
                        {
                            Id = 29,
                            Code = "AppMenu",
                            LangId = 1,
                            Value = "Uygulama"
                        },
                        new
                        {
                            Id = 30,
                            Code = "AppMenu",
                            LangId = 2,
                            Value = "Application"
                        },
                        new
                        {
                            Id = 31,
                            Code = "Added",
                            LangId = 1,
                            Value = "Başarıyla Eklendi."
                        },
                        new
                        {
                            Id = 32,
                            Code = "Added",
                            LangId = 2,
                            Value = "Successfully Added."
                        },
                        new
                        {
                            Id = 33,
                            Code = "Updated",
                            LangId = 1,
                            Value = "Başarıyla Güncellendi."
                        },
                        new
                        {
                            Id = 34,
                            Code = "Updated",
                            LangId = 2,
                            Value = "Successfully Updated."
                        },
                        new
                        {
                            Id = 35,
                            Code = "Deleted",
                            LangId = 1,
                            Value = "Başarıyla Silindi."
                        },
                        new
                        {
                            Id = 36,
                            Code = "Deleted",
                            LangId = 2,
                            Value = "Successfully Deleted."
                        },
                        new
                        {
                            Id = 37,
                            Code = "OperationClaimExists",
                            LangId = 1,
                            Value = "Bu operasyon izni zaten mevcut."
                        },
                        new
                        {
                            Id = 38,
                            Code = "OperationClaimExists",
                            LangId = 2,
                            Value = "This operation permit already exists."
                        },
                        new
                        {
                            Id = 39,
                            Code = "StringLengthMustBeGreaterThanThree",
                            LangId = 1,
                            Value = "Lütfen En Az 3 Karakterden Oluşan Bir İfade Girin."
                        },
                        new
                        {
                            Id = 40,
                            Code = "StringLengthMustBeGreaterThanThree",
                            LangId = 2,
                            Value = "Please Enter A Phrase Of At Least 3 Characters."
                        },
                        new
                        {
                            Id = 41,
                            Code = "CouldNotBeVerifyCid",
                            LangId = 1,
                            Value = "Kimlik No Doğrulanamadı."
                        },
                        new
                        {
                            Id = 42,
                            Code = "CouldNotBeVerifyCid",
                            LangId = 2,
                            Value = "Could not be verify Citizen Id"
                        },
                        new
                        {
                            Id = 43,
                            Code = "VerifyCid",
                            LangId = 1,
                            Value = "Kimlik No Doğrulandı."
                        },
                        new
                        {
                            Id = 44,
                            Code = "VerifyCid",
                            LangId = 2,
                            Value = "Verify Citizen Id"
                        },
                        new
                        {
                            Id = 45,
                            Code = "AuthorizationsDenied",
                            LangId = 1,
                            Value = "Yetkiniz olmayan bir alana girmeye çalıştığınız tespit edildi."
                        },
                        new
                        {
                            Id = 46,
                            Code = "AuthorizationsDenied",
                            LangId = 2,
                            Value = "It has been detected that you are trying to enter an area that you do not have authorization."
                        },
                        new
                        {
                            Id = 47,
                            Code = "UserNotFound",
                            LangId = 1,
                            Value = "Kimlik Bilgileri Doğrulanamadı. Lütfen Yeni Kayıt Ekranını kullanın."
                        },
                        new
                        {
                            Id = 48,
                            Code = "UserNotFound",
                            LangId = 2,
                            Value = "Credentials Could Not Verify. Please use the New Registration Screen."
                        },
                        new
                        {
                            Id = 49,
                            Code = "PasswordError",
                            LangId = 1,
                            Value = "Kimlik Bilgileri Doğrulanamadı, Kullanıcı adı ve/veya parola hatalı."
                        },
                        new
                        {
                            Id = 50,
                            Code = "PasswordError",
                            LangId = 2,
                            Value = "Credentials Failed to Authenticate, Username and / or password incorrect."
                        },
                        new
                        {
                            Id = 51,
                            Code = "SuccessfulLogin",
                            LangId = 1,
                            Value = "Sisteme giriş başarılı."
                        },
                        new
                        {
                            Id = 52,
                            Code = "SuccessfulLogin",
                            LangId = 2,
                            Value = "Login to the system is successful."
                        },
                        new
                        {
                            Id = 53,
                            Code = "SendMobileCode",
                            LangId = 1,
                            Value = "Lütfen Size SMS Olarak Gönderilen Kodu Girin!"
                        },
                        new
                        {
                            Id = 54,
                            Code = "SendMobileCode",
                            LangId = 2,
                            Value = "Please Enter The Code Sent To You By SMS!"
                        },
                        new
                        {
                            Id = 55,
                            Code = "NameAlreadyExist",
                            LangId = 1,
                            Value = "Oluşturmaya Çalıştığınız Nesne Zaten Var."
                        },
                        new
                        {
                            Id = 56,
                            Code = "NameAlreadyExist",
                            LangId = 2,
                            Value = "The Object You Are Trying To Create Already Exists."
                        },
                        new
                        {
                            Id = 57,
                            Code = "WrongCID",
                            LangId = 1,
                            Value = "Vatandaşlık No Sistemimizde Bulunamadı. Lütfen Yeni Kayıt Oluşturun!"
                        },
                        new
                        {
                            Id = 58,
                            Code = "WrongCID",
                            LangId = 2,
                            Value = "Citizenship Number Not Found In Our System. Please Create New Registration!"
                        },
                        new
                        {
                            Id = 59,
                            Code = "CID",
                            LangId = 1,
                            Value = "Vatandaşlık No"
                        },
                        new
                        {
                            Id = 60,
                            Code = "CID",
                            LangId = 2,
                            Value = "Citizenship Number"
                        },
                        new
                        {
                            Id = 61,
                            Code = "PasswordEmpty",
                            LangId = 1,
                            Value = "Parola boş olamaz!"
                        },
                        new
                        {
                            Id = 62,
                            Code = "PasswordEmpty",
                            LangId = 2,
                            Value = "Password can not be empty!"
                        },
                        new
                        {
                            Id = 63,
                            Code = "PasswordLength",
                            LangId = 1,
                            Value = "Minimum 8 Karakter Uzunluğunda Olmalıdır!"
                        },
                        new
                        {
                            Id = 64,
                            Code = "PasswordLength",
                            LangId = 2,
                            Value = "Must be at least 8 characters long! "
                        },
                        new
                        {
                            Id = 65,
                            Code = "PasswordUppercaseLetter",
                            LangId = 1,
                            Value = "En Az 1 Büyük Harf İçermelidir!"
                        },
                        new
                        {
                            Id = 66,
                            Code = "PasswordUppercaseLetter",
                            LangId = 2,
                            Value = "Must Contain At Least 1 Capital Letter!"
                        },
                        new
                        {
                            Id = 67,
                            Code = "PasswordLowercaseLetter",
                            LangId = 1,
                            Value = "En Az 1 Küçük Harf İçermelidir!"
                        },
                        new
                        {
                            Id = 68,
                            Code = "PasswordLowercaseLetter",
                            LangId = 2,
                            Value = "Must Contain At Least 1 Lowercase Letter!"
                        },
                        new
                        {
                            Id = 69,
                            Code = "PasswordDigit",
                            LangId = 1,
                            Value = "En Az 1 Rakam İçermelidir!"
                        },
                        new
                        {
                            Id = 70,
                            Code = "PasswordDigit",
                            LangId = 2,
                            Value = "It Must Contain At Least 1 Digit!"
                        },
                        new
                        {
                            Id = 71,
                            Code = "PasswordSpecialCharacter",
                            LangId = 1,
                            Value = "En Az 1 Simge İçermelidir!"
                        },
                        new
                        {
                            Id = 72,
                            Code = "PasswordSpecialCharacter",
                            LangId = 2,
                            Value = "Must Contain At Least 1 Symbol!"
                        },
                        new
                        {
                            Id = 73,
                            Code = "SendPassword",
                            LangId = 1,
                            Value = "Yeni Parolanız E-Posta Adresinize Gönderildi."
                        },
                        new
                        {
                            Id = 74,
                            Code = "SendPassword",
                            LangId = 2,
                            Value = "Your new password has been sent to your e-mail address."
                        },
                        new
                        {
                            Id = 75,
                            Code = "InvalidCode",
                            LangId = 1,
                            Value = "Geçersiz Bir Kod Girdiniz!"
                        },
                        new
                        {
                            Id = 76,
                            Code = "InvalidCode",
                            LangId = 2,
                            Value = "You Entered An Invalid Code!"
                        },
                        new
                        {
                            Id = 77,
                            Code = "SmsServiceNotFound",
                            LangId = 1,
                            Value = "SMS Servisine Ulaşılamıyor."
                        },
                        new
                        {
                            Id = 78,
                            Code = "SmsServiceNotFound",
                            LangId = 2,
                            Value = "Unable to Reach SMS Service."
                        },
                        new
                        {
                            Id = 79,
                            Code = "TrueButCellPhone",
                            LangId = 1,
                            Value = "Bilgiler doğru. Cep telefonu gerekiyor."
                        },
                        new
                        {
                            Id = 80,
                            Code = "TrueButCellPhone",
                            LangId = 2,
                            Value = "The information is correct. Cell phone is required."
                        },
                        new
                        {
                            Id = 81,
                            Code = "TokenProviderException",
                            LangId = 1,
                            Value = "Token Provider boş olamaz!"
                        },
                        new
                        {
                            Id = 82,
                            Code = "TokenProviderException",
                            LangId = 2,
                            Value = "Token Provider cannot be empty!"
                        },
                        new
                        {
                            Id = 83,
                            Code = "Unknown",
                            LangId = 1,
                            Value = "Bilinmiyor!"
                        },
                        new
                        {
                            Id = 84,
                            Code = "Unknown",
                            LangId = 2,
                            Value = "Unknown!"
                        },
                        new
                        {
                            Id = 85,
                            Code = "NewPassword",
                            LangId = 1,
                            Value = "Yeni Parola:"
                        },
                        new
                        {
                            Id = 86,
                            Code = "NewPassword",
                            LangId = 2,
                            Value = "New Password:"
                        },
                        new
                        {
                            Id = 87,
                            Code = "ChangePassword",
                            LangId = 1,
                            Value = "Parola Değiştir"
                        },
                        new
                        {
                            Id = 88,
                            Code = "ChangePassword",
                            LangId = 2,
                            Value = "Change Password"
                        },
                        new
                        {
                            Id = 89,
                            Code = "Save",
                            LangId = 1,
                            Value = "Kaydet"
                        },
                        new
                        {
                            Id = 90,
                            Code = "Save",
                            LangId = 2,
                            Value = "Save"
                        },
                        new
                        {
                            Id = 91,
                            Code = "GroupName",
                            LangId = 1,
                            Value = "Grup Adı"
                        },
                        new
                        {
                            Id = 92,
                            Code = "GroupName",
                            LangId = 2,
                            Value = "Group Name"
                        },
                        new
                        {
                            Id = 93,
                            Code = "FullName",
                            LangId = 1,
                            Value = "Tam Adı"
                        },
                        new
                        {
                            Id = 94,
                            Code = "FullName",
                            LangId = 2,
                            Value = "Full Name"
                        },
                        new
                        {
                            Id = 95,
                            Code = "Address",
                            LangId = 1,
                            Value = "Adres"
                        },
                        new
                        {
                            Id = 96,
                            Code = "Address",
                            LangId = 2,
                            Value = "Address"
                        },
                        new
                        {
                            Id = 97,
                            Code = "Notes",
                            LangId = 1,
                            Value = "Notlar"
                        },
                        new
                        {
                            Id = 98,
                            Code = "Notes",
                            LangId = 2,
                            Value = "Notes"
                        },
                        new
                        {
                            Id = 99,
                            Code = "ConfirmPassword",
                            LangId = 1,
                            Value = "Parolayı Doğrula"
                        },
                        new
                        {
                            Id = 100,
                            Code = "ConfirmPassword",
                            LangId = 2,
                            Value = "Confirm Password"
                        },
                        new
                        {
                            Id = 101,
                            Code = "Code",
                            LangId = 1,
                            Value = "Kod"
                        },
                        new
                        {
                            Id = 102,
                            Code = "Code",
                            LangId = 2,
                            Value = "Code"
                        },
                        new
                        {
                            Id = 103,
                            Code = "Alias",
                            LangId = 1,
                            Value = "Görünen Ad"
                        },
                        new
                        {
                            Id = 104,
                            Code = "Alias",
                            LangId = 2,
                            Value = "Alias"
                        },
                        new
                        {
                            Id = 105,
                            Code = "Description",
                            LangId = 1,
                            Value = "Açıklama"
                        },
                        new
                        {
                            Id = 106,
                            Code = "Description",
                            LangId = 2,
                            Value = "Description"
                        },
                        new
                        {
                            Id = 107,
                            Code = "Value",
                            LangId = 1,
                            Value = "Değer"
                        },
                        new
                        {
                            Id = 108,
                            Code = "Value",
                            LangId = 2,
                            Value = "Value"
                        },
                        new
                        {
                            Id = 109,
                            Code = "LangCode",
                            LangId = 1,
                            Value = "Dil Kodu"
                        },
                        new
                        {
                            Id = 110,
                            Code = "LangCode",
                            LangId = 2,
                            Value = "Lang Code"
                        },
                        new
                        {
                            Id = 111,
                            Code = "Name",
                            LangId = 1,
                            Value = "Adı"
                        },
                        new
                        {
                            Id = 112,
                            Code = "Name",
                            LangId = 2,
                            Value = "Name"
                        },
                        new
                        {
                            Id = 113,
                            Code = "MobilePhones",
                            LangId = 1,
                            Value = "Cep Telefonu"
                        },
                        new
                        {
                            Id = 114,
                            Code = "MobilePhones",
                            LangId = 2,
                            Value = "Mobile Phone"
                        },
                        new
                        {
                            Id = 115,
                            Code = "NoRecordsFound",
                            LangId = 1,
                            Value = "Kayıt Bulunamadı"
                        },
                        new
                        {
                            Id = 116,
                            Code = "NoRecordsFound",
                            LangId = 2,
                            Value = "No Records Found"
                        },
                        new
                        {
                            Id = 117,
                            Code = "Required",
                            LangId = 1,
                            Value = "Bu alan zorunludur!"
                        },
                        new
                        {
                            Id = 118,
                            Code = "Required",
                            LangId = 2,
                            Value = "This field is required!"
                        },
                        new
                        {
                            Id = 119,
                            Code = "Permissions",
                            LangId = 1,
                            Value = "Permissions"
                        },
                        new
                        {
                            Id = 120,
                            Code = "Permissions",
                            LangId = 2,
                            Value = "İzinler"
                        },
                        new
                        {
                            Id = 121,
                            Code = "GroupList",
                            LangId = 1,
                            Value = "Grup Listesi"
                        },
                        new
                        {
                            Id = 122,
                            Code = "GroupList",
                            LangId = 2,
                            Value = "Group List"
                        },
                        new
                        {
                            Id = 123,
                            Code = "GrupPermissions",
                            LangId = 1,
                            Value = "Grup Yetkileri"
                        },
                        new
                        {
                            Id = 124,
                            Code = "GrupPermissions",
                            LangId = 2,
                            Value = "Grup Permissions"
                        },
                        new
                        {
                            Id = 125,
                            Code = "Add",
                            LangId = 1,
                            Value = "Ekle"
                        },
                        new
                        {
                            Id = 126,
                            Code = "Add",
                            LangId = 2,
                            Value = "Add"
                        },
                        new
                        {
                            Id = 127,
                            Code = "UserList",
                            LangId = 1,
                            Value = "Kullanıcı Listesi"
                        },
                        new
                        {
                            Id = 128,
                            Code = "UserList",
                            LangId = 2,
                            Value = "User List"
                        },
                        new
                        {
                            Id = 129,
                            Code = "OperationClaimList",
                            LangId = 1,
                            Value = "Yetki Listesi"
                        },
                        new
                        {
                            Id = 130,
                            Code = "OperationClaimList",
                            LangId = 2,
                            Value = "OperationClaim List"
                        },
                        new
                        {
                            Id = 131,
                            Code = "LanguageList",
                            LangId = 1,
                            Value = "Dil Listesi"
                        },
                        new
                        {
                            Id = 132,
                            Code = "LanguageList",
                            LangId = 2,
                            Value = "Language List"
                        },
                        new
                        {
                            Id = 133,
                            Code = "TranslateList",
                            LangId = 1,
                            Value = "Dil Çeviri Listesi"
                        },
                        new
                        {
                            Id = 134,
                            Code = "TranslateList",
                            LangId = 2,
                            Value = "Translate List"
                        },
                        new
                        {
                            Id = 135,
                            Code = "LogList",
                            LangId = 1,
                            Value = "İşlem Kütüğü"
                        },
                        new
                        {
                            Id = 136,
                            Code = "LogList",
                            LangId = 2,
                            Value = "LogList"
                        },
                        new
                        {
                            Id = 137,
                            Code = "DeleteConfirm",
                            LangId = 1,
                            Value = "Emin misiniz?"
                        },
                        new
                        {
                            Id = 138,
                            Code = "DeleteConfirm",
                            LangId = 2,
                            Value = "Are you sure?"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CitizenId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("MobilePhones")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdateContactDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId");

                    b.HasIndex("CitizenId");

                    b.HasIndex("MobilePhones");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ClaimId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Elektronik"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Giyim"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Ev & Yaşam"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Spor Malzemeleri"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Kozmetik"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Oyuncaklar"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Kitaplar"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Mobilya"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "Saatler"
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "Mücevherat"
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            Name = "Cep Telefonları",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 12,
                            IsDeleted = false,
                            Name = "Bilgisayarlar",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 13,
                            IsDeleted = false,
                            Name = "Giyim",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 14,
                            IsDeleted = false,
                            Name = "Giyim",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 15,
                            IsDeleted = false,
                            Name = "Mutfak Eşyaları",
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 16,
                            IsDeleted = false,
                            Name = "Mobilyalar",
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 17,
                            IsDeleted = false,
                            Name = "Futbol Malzemeleri",
                            ParentCategoryId = 4
                        },
                        new
                        {
                            Id = 18,
                            IsDeleted = false,
                            Name = "Basketbol Malzemeleri",
                            ParentCategoryId = 4
                        },
                        new
                        {
                            Id = 19,
                            IsDeleted = false,
                            Name = "Makyaj Ürünleri",
                            ParentCategoryId = 5
                        },
                        new
                        {
                            Id = 20,
                            IsDeleted = false,
                            Name = "Cilt Bakım Ürünleri",
                            ParentCategoryId = 5
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("GenderType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("LoyaltyPoints")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "İletişim Bilgisi 1",
                            GenderType = 0,
                            IsDeleted = false,
                            LoyaltyPoints = 100m,
                            Name = "Müşteri 1",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Address = "İletişim Bilgisi 2",
                            GenderType = 0,
                            IsDeleted = false,
                            LoyaltyPoints = 50m,
                            Name = "Müşteri 2",
                            Type = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.CustomerAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 500m,
                            CustomerId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            Balance = 250m,
                            CustomerId = 2,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 9, 14, 10, 49, 19, 559, DateTimeKind.Local).AddTicks(9420)
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            IsDeleted = false,
                            OrderDate = new DateTime(2023, 9, 14, 10, 49, 19, 559, DateTimeKind.Local).AddTicks(9477)
                        });
                });

            modelBuilder.Entity("Entities.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 2,
                            UnitPrice = 10.99m
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            OrderId = 2,
                            ProductId = 2,
                            Quantity = 3,
                            UnitPrice = 15.99m
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("CurrentStockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaximumStockQuantity")
                        .HasColumnType("int");

                    b.Property<int>("MinimumStockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SKU")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShelfNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CostPrice = 0m,
                            CurrentStockQuantity = 0,
                            Description = "Açıklama 1",
                            IsDeleted = false,
                            MaximumStockQuantity = 0,
                            MinimumStockQuantity = 0,
                            Name = "Ürün 1",
                            SKU = "SKU1",
                            UnitPrice = 10.99m,
                            Weight = 0m
                        },
                        new
                        {
                            Id = 2,
                            CostPrice = 0m,
                            CurrentStockQuantity = 0,
                            Description = "Açıklama 2",
                            IsDeleted = false,
                            MaximumStockQuantity = 0,
                            MinimumStockQuantity = 0,
                            Name = "Ürün 2",
                            SKU = "SKU2",
                            UnitPrice = 15.99m,
                            Weight = 0m
                        });
                });

            modelBuilder.Entity("Entities.Concrete.ProductCategories", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("Entities.Concrete.ProductSupplier", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductSuppliers", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            SupplierId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            ProductId = 2,
                            SupplierId = 2,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchases", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            PurchaseDate = new DateTime(2023, 9, 14, 10, 49, 19, 566, DateTimeKind.Local).AddTicks(2180),
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            PurchaseDate = new DateTime(2023, 9, 14, 10, 49, 19, 566, DateTimeKind.Local).AddTicks(2235),
                            SupplierId = 2
                        });
                });

            modelBuilder.Entity("Entities.Concrete.PurchaseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            ProductId = 1,
                            PurchaseId = 1,
                            Quantity = 5,
                            UnitPrice = 9.99m
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            ProductId = 2,
                            PurchaseId = 2,
                            Quantity = 8,
                            UnitPrice = 14.99m
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Sales", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            IsDeleted = false,
                            SaleDate = new DateTime(2023, 9, 14, 10, 49, 19, 567, DateTimeKind.Local).AddTicks(3169)
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            IsDeleted = false,
                            SaleDate = new DateTime(2023, 9, 14, 10, 49, 19, 567, DateTimeKind.Local).AddTicks(3223)
                        });
                });

            modelBuilder.Entity("Entities.Concrete.SaleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            ProductId = 1,
                            Quantity = 3,
                            SaleId = 1,
                            UnitPrice = 12.99m
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            ProductId = 2,
                            Quantity = 4,
                            SaleId = 2,
                            UnitPrice = 17.99m
                        });
                });

            modelBuilder.Entity("Entities.Concrete.StockMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MovementType")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StockMovements", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            MovementDate = new DateTime(2023, 9, 14, 10, 49, 19, 568, DateTimeKind.Local).AddTicks(2303),
                            MovementType = 0,
                            ProductId = 1,
                            Quantity = 10,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            MovementDate = new DateTime(2023, 9, 14, 10, 49, 19, 568, DateTimeKind.Local).AddTicks(2358),
                            MovementType = 1,
                            ProductId = 2,
                            Quantity = -5,
                            WarehouseId = 1
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Suppliers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactInfo = "İletişim Bilgisi 1",
                            IsDeleted = false,
                            Name = "Tedarikçi 1"
                        },
                        new
                        {
                            Id = 2,
                            ContactInfo = "İletişim Bilgisi 2",
                            IsDeleted = false,
                            Name = "Tedarikçi 2"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("CustomerAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAccountId");

                    b.ToTable("Transactions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 100m,
                            CustomerAccountId = 1,
                            IsDeleted = false,
                            TransactionDate = new DateTime(2023, 9, 14, 10, 49, 19, 568, DateTimeKind.Local).AddTicks(9619),
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Amount = 50m,
                            CustomerAccountId = 2,
                            IsDeleted = false,
                            TransactionDate = new DateTime(2023, 9, 14, 10, 49, 19, 568, DateTimeKind.Local).AddTicks(9656),
                            Type = 0
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Warehouses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Location = "Konum 1",
                            Name = "Depo 1"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Location = "Konum 2",
                            Name = "Depo 2"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.HasOne("Entities.Concrete.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Entities.Concrete.CustomerAccount", b =>
                {
                    b.HasOne("Entities.Concrete.Customer", "Customer")
                        .WithOne("CustomerAccount")
                        .HasForeignKey("Entities.Concrete.CustomerAccount", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.HasOne("Entities.Concrete.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.Concrete.OrderItem", b =>
                {
                    b.HasOne("Entities.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Concrete.ProductCategories", b =>
                {
                    b.HasOne("Entities.Concrete.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Concrete.ProductSupplier", b =>
                {
                    b.HasOne("Entities.Concrete.Product", "Product")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Supplier", "Supplier")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Entities.Concrete.Purchase", b =>
                {
                    b.HasOne("Entities.Concrete.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Entities.Concrete.PurchaseItem", b =>
                {
                    b.HasOne("Entities.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Purchase", "Purchase")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Entities.Concrete.Sale", b =>
                {
                    b.HasOne("Entities.Concrete.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.Concrete.SaleItem", b =>
                {
                    b.HasOne("Entities.Concrete.Product", "Product")
                        .WithMany("SaleItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Sale", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Entities.Concrete.StockMovement", b =>
                {
                    b.HasOne("Entities.Concrete.Product", "Product")
                        .WithMany("StockMovements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Warehouse", "Warehouse")
                        .WithMany("StockMovements")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Entities.Concrete.Transaction", b =>
                {
                    b.HasOne("Entities.Concrete.CustomerAccount", "CustomerAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerAccount");
                });

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Entities.Concrete.Customer", b =>
                {
                    b.Navigation("CustomerAccount");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entities.Concrete.CustomerAccount", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductSuppliers");

                    b.Navigation("SaleItems");

                    b.Navigation("StockMovements");
                });

            modelBuilder.Entity("Entities.Concrete.Purchase", b =>
                {
                    b.Navigation("PurchaseItems");
                });

            modelBuilder.Entity("Entities.Concrete.Sale", b =>
                {
                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("Entities.Concrete.Supplier", b =>
                {
                    b.Navigation("ProductSuppliers");
                });

            modelBuilder.Entity("Entities.Concrete.Warehouse", b =>
                {
                    b.Navigation("StockMovements");
                });
#pragma warning restore 612, 618
        }
    }
}
